class DNode<T> {
  T data;
  DNode<T>? next;
  DNode<T>? prev;

  DNode(this.data);
}

class DoublyLinkedList<T> {
  DNode<T>? head;

  // Menambahkan node di akhir list
  void append(T data) {
    DNode<T> newNode = DNode(data);
    if (head == null) {
      head = newNode;
      return;
    }

    DNode<T>? current = head;
    while (current!.next != null) {
      current = current.next;
    }

    current.next = newNode;
    newNode.prev = current;
  }

  // Mencari node berdasarkan referensi (bukan data)
  DNode<T>? searchNode(DNode<T> target) {
    DNode<T>? current = head;

    while (current != null) {
      if (current == target) {
        return current;
      }
      current = current.next;
    }

    return null;
  }

  // Menampilkan seluruh isi list
  void printList() {
    DNode<T>? current = head;
    while (current != null) {
      print(current.data);
      current = current.next;
    }
  }
}

void main() {
  // Membuat linked list dan menambahkan data
  DoublyLinkedList<int> list = DoublyLinkedList<int>();

  list.append(10);
  list.append(20);
  list.append(30);
  list.printList();

  // Akses node tertentu (misal node ke-2)
  DNode<int>? nodeToFind = list.head?.next; // node dengan data 20

  if (nodeToFind != null) {
    DNode<int>? found = list.searchNode(nodeToFind);

    if (found != null) {
      print("Node ditemukan dengan data: ${found.data}");
    } else {
      print("Node tidak ditemukan.");
    }
  } else {
    print("Node yang ingin dicari tidak valid.");
  }
}
