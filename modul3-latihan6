import 'dart:math';
import 'dart:io';

void insertionSort(List<int> arr) {
  for (int i = 1; i < arr.length; i++) {
    int key = arr[i];
    int j = i - 1;
    while (j >= 0 && arr[j] > key) {
      arr[j + 1] = arr[j];
      j--;
    }
    arr[j + 1] = key;
  }
}

void selectionSort(List<int> arr) {
  for (int i = 0; i < arr.length - 1; i++) {
    int minIdx = i;
    for (int j = i + 1; j < arr.length; j++) {
      if (arr[j] < arr[minIdx]) {
        minIdx = j;
      }
    }
    int temp = arr[i];
    arr[i] = arr[minIdx];
    arr[minIdx] = temp;
  }
}

void bubbleSort(List<int> arr) {
  for (int i = 0; i < arr.length - 1; i++) {
    for (int j = 0; j < arr.length - i - 1; j++) {
      if (arr[j] > arr[j + 1]) {
        int temp = arr[j];
        arr[j] = arr[j + 1];
        arr[j + 1] = temp;
      }
    }
  }
}

void shellSort(List<int> arr) {
  int n = arr.length;
  for (int gap = n ~/ 2; gap > 0; gap ~/= 2) {
    for (int i = gap; i < n; i++) {
      int temp = arr[i];
      int j;
      for (j = i; j >= gap && arr[j - gap] > temp; j -= gap) {
        arr[j] = arr[j - gap];
      }
      arr[j] = temp;
    }
  }
}

void quickSort(List<int> arr, int left, int right) {
  if (left < right) {
    int pivotIdx = partition(arr, left, right);
    quickSort(arr, left, pivotIdx - 1);
    quickSort(arr, pivotIdx + 1, right);
  }
}

int partition(List<int> arr, int left, int right) {
  int pivot = arr[right];
  int i = left - 1;
  for (int j = left; j < right; j++) {
    if (arr[j] <= pivot) {
      i++;
      int temp = arr[i];
      arr[i] = arr[j];
      arr[j] = temp;
    }
  }
  int temp = arr[i + 1];
  arr[i + 1] = arr[right];
  arr[right] = temp;
  return i + 1;
}

void mergeSort(List<int> arr) {
  if (arr.length > 1) {
    int mid = arr.length ~/ 2;
    List<int> left = arr.sublist(0, mid);
    List<int> right = arr.sublist(mid);
    mergeSort(left);
    mergeSort(right);
    merge(arr, left, right);
  }
}

void merge(List<int> arr, List<int> left, List<int> right) {
  int i = 0, j = 0, k = 0;
  while (i < left.length && j < right.length) {
    if (left[i] <= right[j]) {
      arr[k++] = left[i++];
    } else {
      arr[k++] = right[j++];
    }
  }
  while (i < left.length) arr[k++] = left[i++];
  while (j < right.length) arr[k++] = right[j++];
}

void main() {
  List<int> sizes = [50000, 100000, 150000, 200000, 250000, 300000, 350000, 400000, 450000, 500000];
  print("Jumlah Data\tInsertion\tSelection\tBubble\tShell\tQuick\tMerge");
  
  for (int size in sizes) {
    List<int> data = List<int>.generate(size, (index) => Random().nextInt(100000));
    
    List<int> temp;
    DateTime start;
    Duration elapsedTime;

    temp = List<int>.from(data);
    start = DateTime.now();
    insertionSort(temp);
    elapsedTime = DateTime.now().difference(start);
    String insertionTime = "${elapsedTime.inMilliseconds}";

    temp = List<int>.from(data);
    start = DateTime.now();
    selectionSort(temp);
    elapsedTime = DateTime.now().difference(start);
    String selectionTime = "${elapsedTime.inMilliseconds}";

    temp = List<int>.from(data);
    start = DateTime.now();
    bubbleSort(temp);
    elapsedTime = DateTime.now().difference(start);
    String bubbleTime = "${elapsedTime.inMilliseconds}";

    temp = List<int>.from(data);
    start = DateTime.now();
    shellSort(temp);
    elapsedTime = DateTime.now().difference(start);
    String shellTime = "${elapsedTime.inMilliseconds}";

    temp = List<int>.from(data);
    start = DateTime.now();
    quickSort(temp, 0, temp.length - 1);
    elapsedTime = DateTime.now().difference(start);
    String quickTime = "${elapsedTime.inMilliseconds}";

    temp = List<int>.from(data);
    start = DateTime.now();
    mergeSort(temp);
    elapsedTime = DateTime.now().difference(start);
    String mergeTime = "${elapsedTime.inMilliseconds}";

    print("$size\t\t$insertionTime\t\t$selectionTime\t\t$bubbleTime\t$shellTime\t$quickTime\t$mergeTime");
  }
}
